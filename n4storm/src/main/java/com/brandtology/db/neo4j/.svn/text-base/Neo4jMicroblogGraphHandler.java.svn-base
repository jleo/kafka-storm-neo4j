/**
 * 
 */
package com.brandtology.db.neo4j;

import java.net.URI;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.List;

import javax.ws.rs.core.MediaType;

import org.json.me.JSONException;
import org.json.me.JSONObject;
import org.neo4j.graphdb.GraphDatabaseService;

import com.brandtology.alert.twitter.datasift.DatasiftParser;
import com.brandtology.entity.Tweet;
import com.brandtology.entity.Voice;
import com.brandtology.io.log.SystemLogger;
import com.brandtology.util.FileHandler;
import com.brandtology.util.FormatConstant;
import com.sun.jersey.api.client.Client;
import com.sun.jersey.api.client.ClientResponse;
import com.sun.jersey.api.client.WebResource;

/**
 * @author leah
 *
 */
public class Neo4jMicroblogGraphHandler {
	private static final String SERVER_ROOT_URI = "http://localhost:7474/db/data/";//"http://192.168.50.212:7474/";
    
	public static URI voiceIndex;
	public static URI tweetIndex;
	
	public static URI followsRelationshipIndex;
	public static URI publishedRelationshipIndex;
	public static URI mentionRelationshipIndex;
	public static URI replyRelationshipIndex;
	public static URI retweetRelationshipIndex;

    /**
     * 
     */   
	private static void registerShutdownHook( final GraphDatabaseService graphDb )
	{
		// Registers a shutdown hook for the Neo4j instance so that it
		// shuts down nicely when the VM exits (even if you "Ctrl-C" the
		// running example before it's completed)
		Runtime.getRuntime().addShutdownHook( new Thread()
		{
			@Override
			public void run()
			{
				graphDb.shutdown();
			}
		} );
	}
    /**
     * 
     */  
    private static void checkDatabaseIsRunning()
    {
        // START SNIPPET: checkServer
        WebResource resource = Client.create()
                .resource( SERVER_ROOT_URI );
        ClientResponse response = resource.get( ClientResponse.class );

        SystemLogger.printInfo( "CHECK DATABASE IS RUNNING "+String.format( "GET on [%s], status code [%d]",
                SERVER_ROOT_URI, response.getStatus() ) );
        response.close();
        // END SNIPPET: checkServer
    }
    

    /**
     * 
     */
    // START SNIPPET: insideAddMetaToProp
    private static void addMetadataToProperty( URI relationshipUri,
            String name, String value ) throws URISyntaxException
    {
        URI propertyUri = new URI( relationshipUri.toString() + "/properties" );
        String entity = toJsonNameValuePairCollection( name, value );
        WebResource resource = Client.create()
                .resource( propertyUri );
        ClientResponse response = resource.accept( MediaType.APPLICATION_JSON )
                .type( MediaType.APPLICATION_JSON )
                .entity( entity )
                .put( ClientResponse.class );

        SystemLogger.printInfo( "ADD PROPERTY TO RELATIONSHIP "+String.format(
                "PUT [%s] to [%s], status code [%d]", entity, propertyUri,
                response.getStatus() ) );
        response.close();
    }

    // END SNIPPET: insideAddMetaToProp

    /**
     * 
     */
    private static String toJsonNameValuePairCollection( String name,
            String value )
    {
        return String.format( "{ \"%s\" : \"%s\" }", name, value );
    }

    /**
     * 
     */
    private static URI createNode()
    {
        // START SNIPPET: createNode
        final String nodeEntryPointUri = SERVER_ROOT_URI + "node";
        // http://localhost:7474/db/data/node

        WebResource resource = Client.create()
                .resource( nodeEntryPointUri );
        // POST {} to the node entry point URI
        ClientResponse response = resource.accept( MediaType.APPLICATION_JSON )
                .type( MediaType.APPLICATION_JSON )
                .entity( "{}" )
                .post( ClientResponse.class );

        final URI location = response.getLocation();
        if(location==null)
        	SystemLogger.printWarning("NULL URI: "+response);
        
        SystemLogger.printInfo( "CREATE NODE "+String.format(
                "POST to [%s], status code [%d], location header [%s]",
                nodeEntryPointUri, response.getStatus(), location.toString() ) );
        response.close();

        return location;
        // END SNIPPET: createNode
    }

    // START SNIPPET: insideAddRel
    /**
     * 
     */
    private static URI addRelationship( URI startNode, URI endNode,
            String relationshipType, String... jsonAttributes )
            throws URISyntaxException
    {
        URI fromUri = new URI( startNode.toString() + "/relationships" );
        String relationshipJson = generateJsonRelationship( endNode,
                relationshipType, jsonAttributes );

        WebResource resource = Client.create()
                .resource( fromUri );
        // POST JSON to the relationships URI
        ClientResponse response = resource.accept( MediaType.APPLICATION_JSON )
                .type( MediaType.APPLICATION_JSON )
                .entity( relationshipJson )
                .post( ClientResponse.class );

        final URI location = response.getLocation();
        SystemLogger.printInfo( "ADD RELATIONSHIP "+String.format(
                "POST to [%s], status code [%d], location header [%s]",
                fromUri, response.getStatus(), location.toString() ) );

        response.close();
        return location;
    }
    // END SNIPPET: insideAddRel

    /**
     * 
     */
    private static String generateJsonRelationship( URI endNode,
            String relationshipType, String... jsonAttributes )
    {
        StringBuilder sb = new StringBuilder();
        sb.append( "{ \"to\" : \"" );
        sb.append( endNode.toString() );
        sb.append( "\", " );

        sb.append( "\"type\" : \"" );
        sb.append( relationshipType );
        if ( jsonAttributes == null || jsonAttributes.length < 1 )
        {
            sb.append( "\"" );
        }
        else
        {
            sb.append( "\", \"data\" : " );
            for ( int i = 0; i < jsonAttributes.length; i++ )
            {
                sb.append( jsonAttributes[i] );
                if ( i < jsonAttributes.length - 1 )
                { // Miss off the final comma
                    sb.append( ", " );
                }
            }
        }

        sb.append( " }" );
        return sb.toString();
    }

    /**
     * 
     */
    private static void addProperty( URI nodeUri, String propertyName,
            String propertyValue )
    {
        // START SNIPPET: addProp
        String propertyUri = nodeUri.toString() + "/properties/" + propertyName;
        // http://localhost:7474/db/data/node/{node_id}/properties/{property_name}

        WebResource resource = Client.create()
                .resource( propertyUri );
        ClientResponse response = resource.accept( MediaType.APPLICATION_JSON )
                .type( MediaType.APPLICATION_JSON )
                .entity( "\"" + propertyValue + "\"" )
                .put( ClientResponse.class );

        SystemLogger.printInfo( "ADD PROPERTY TO NODE "+String.format( "PUT to [%s], status code [%d]",
                propertyUri, response.getStatus() ) );
        response.close();
        // END SNIPPET: addProp
    }

 
    /**
     * 
     */
    private static List listNodeIndexes() throws JSONException
    {
    	List results = new ArrayList();
        // START SNIPPET: createNode
        final String nodeEntryPointUri = SERVER_ROOT_URI + "/index/node";
        // http://localhost:7474/db/data/node
        
        WebResource resource = Client.create()
                .resource( nodeEntryPointUri );
        // POST {} to the node entry point URI
        ClientResponse response = resource.accept( MediaType.APPLICATION_JSON )
                .type( MediaType.APPLICATION_JSON )
                .entity( "{}" )
                .post( ClientResponse.class );

        String value = response.getEntity(String.class);
        JSONObject json = new JSONObject(value);
        Enumeration indexes = json.keys();
        while(indexes.hasMoreElements()){
        	JSONObject index = (JSONObject)indexes.nextElement();
        	//String indexName = index.
        }
        
        
        SystemLogger.printInfo( "CREATE NODE INDEX "+String.format(
                "POST to [%s], status code [%d], location header [%s]",
                nodeEntryPointUri, response.getStatus(), value ) );
        response.close();

        return results;
        // END SNIPPET: createNode
    }
    
    /**
     * 
     */
    private static URI createNodeIndex(String indexName)
    {
        // START SNIPPET: createNode
        final String nodeEntryPointUri = SERVER_ROOT_URI + "/index/node";
        // http://localhost:7474/db/data/node

        String indexConfigJson = generateJsonIndexConfig( indexName );
        
        WebResource resource = Client.create()
                .resource( nodeEntryPointUri );
        // POST {} to the node entry point URI
        ClientResponse response = resource.accept( MediaType.APPLICATION_JSON )
                .type( MediaType.APPLICATION_JSON )
                .entity( indexConfigJson )
                .post( ClientResponse.class );

        final URI location = response.getLocation();
        if(location==null)
        	SystemLogger.printWarning("NULL URI: "+response);
        
        SystemLogger.printInfo( "CREATE NODE INDEX "+String.format(
                "POST to [%s], status code [%d], location header [%s]",
                nodeEntryPointUri, response.getStatus(), location.toString() ) );
        response.close();

        return location;
        // END SNIPPET: createNode
    }
  
    /**
     * 
     */
    private static String generateJsonIndexConfig( String indexName)
    {
        StringBuilder sb = new StringBuilder();
        sb.append( "{ " );
        sb.append( "\"name\" : \"" + indexName +"\"");
        sb.append( ", " );
        sb.append( "\"config\" : " );
        sb.append( "{ " );
        sb.append( "\"type\":\"exact\"");
        sb.append( ", " );
        sb.append( "\"provider\":\"lucene\"");
        sb.append( " }" );
        sb.append( " }" );
        return sb.toString();
    }

    /**
     * 
     */
    private static URI addNodeToIndex(URI indexUri, URI nodeUri, String key, String value)
    {
        // START SNIPPET: createNode
        final String nodeEntryPointUri = indexUri.toString();
        // http://localhost:7474/db/data/node

        String nodeIndexJson = generateJsonNodeIndexInfo( nodeUri, key, value );
        
        WebResource resource = Client.create()
                .resource( nodeEntryPointUri );
        // POST {} to the node entry point URI
        ClientResponse response = resource.accept( MediaType.APPLICATION_JSON )
                .type( MediaType.APPLICATION_JSON )
                .entity( nodeIndexJson )
                .post( ClientResponse.class );

        final URI location = response.getLocation();
        if(location==null)
        	SystemLogger.printWarning("NULL URI: "+response);
        
        SystemLogger.printInfo( "ADD NODE TO INDEX "+String.format(
                "POST to [%s], status code [%d], location header [%s]",
                nodeEntryPointUri, response.getStatus(), location.toString() ) );
        response.close();

        return location;
        // END SNIPPET: createNode
    }

    /**
     * 
     */
    private static String generateJsonNodeIndexInfo( URI nodeUri, String key, String value)
    {
        StringBuilder sb = new StringBuilder();
        sb.append( "{ ");
        sb.append( "\"value\":\""+value+"\"");
        sb.append( ", " );
        sb.append( "\"uri\" : \""+ nodeUri.toString() +"\"");
        sb.append( ", " );        
        sb.append( "\"key\":\""+key+"\"");
        sb.append( " }" );
        return sb.toString();
    }

    /**
     * 
     */
    private static URI findExactNodeFromIndex(URI indexUri, String key, String value)
    	throws URISyntaxException
    {
        // START SNIPPET: createNode
        URI nodeEntryPointUri = new URI( indexUri.toString() + "/"+key+"/"+value );
        // http://localhost:7474/db/data/node
        
        WebResource resource = Client.create()
                .resource( nodeEntryPointUri );
        // POST {} to the node entry point URI
        ClientResponse response = resource.accept( MediaType.APPLICATION_JSON )
                .type( MediaType.APPLICATION_JSON )
                .entity( "{}" )
                .post( ClientResponse.class );

        final URI location = response.getLocation();
        if(location==null)
        	SystemLogger.printWarning("NULL URI: "+response);
        
        SystemLogger.printInfo( "FIND EXACT NODE FROM INDEX "+String.format(
                "POST to [%s], status code [%d], location header [%s]",
                nodeEntryPointUri, response.getStatus(), location.toString() ) );
        response.close();

        return location;
        // END SNIPPET: createNode
    }

    /**
     * 
     */
    private static URI removeNodeKeyValueFromIndex(URI indexUri, URI nodeUri, String key, String value)
            throws URISyntaxException
    {
        // START SNIPPET: createNode
        URI nodeEntryPointUri = new URI( indexUri.toString() + "/"+key+"/"+value+"/" );
        // http://localhost:7474/db/data/node
        
        WebResource resource = Client.create()
                .resource( nodeEntryPointUri );
        // POST {} to the node entry point URI
        ClientResponse response = resource.accept( MediaType.APPLICATION_JSON )
                .type( MediaType.APPLICATION_JSON )
                .entity( "{}" )
                .post( ClientResponse.class );

        final URI location = response.getLocation();
        if(location==null)
        	SystemLogger.printWarning("NULL URI: "+response);
        
        SystemLogger.printInfo( String.format(
                "POST to [%s], status code [%d], location header [%s]",
                nodeEntryPointUri, response.getStatus(), location.toString() ) );
        response.close();

        return location;
        // END SNIPPET: createNode
    }

	/**
	 * @param args
	 */
	public static void main(String[] args) throws Exception{
		// TODO Auto-generated method stub
		checkDatabaseIsRunning();
		URI voiceIndex = createNodeIndex("voices");
		URI tweetIndex = createNodeIndex("tweets");
		
		String fileName = new String(System.getProperty("user.dir")+"/data/sample_datasift_file_SG_20120610_001501_done.json");
		String value = FileHandler.getFileContent(fileName);
		
		List results = DatasiftParser.parseJSON(value);
		for(int i=0;i<results.size();i++){
			Tweet tweet = (Tweet)results.get(i);
			Voice user = tweet.getAuthor();
			System.out.println(user.writeToLogger());
			System.out.println(tweet.writeToLogger());

	        // START SNIPPET: nodesAndProps
			URI voiceNode = findExactNodeFromIndex(voiceIndex, "uid", user.getUid()); //createNode();
			addProperty(voiceNode, "uid", user.getUid());
			addProperty(voiceNode, "screen_name", user.getScreenName());
			
			URI tweetNode = createNode();
			addProperty(tweetNode, "mid", tweet.getMid());
			addProperty(tweetNode, "content", tweet.getContent());
	        // END SNIPPET: nodesAndProps

	        // START SNIPPET: addRel
			String edgePropertyJSON = "{ \"timestamp\" : \""+FormatConstant.SIMPLE_DF.format(tweet.getTimestamp())+"\" }";
	        URI relationshipUri = addRelationship(voiceNode, tweetNode, MicroblogRelationshipType.PUBLISH.name(),
	                edgePropertyJSON );
	        // END SNIPPET: addRel

	        // START SNIPPET: addMetaToRel
	        //addMetadataToProperty( relationshipUri, "stars", "5" );
	        // END SNIPPET: addMetaToRel

	        // START SNIPPET: queryForSingers
	        //traverseTweetsByAuthor( voiceNode );
	        // END SNIPPET: queryForSingers
		}
		
	}

}
