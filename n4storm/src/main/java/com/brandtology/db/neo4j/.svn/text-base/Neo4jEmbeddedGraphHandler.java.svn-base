/**
 * 
 */
package com.brandtology.db.neo4j;

import java.io.File;
import java.io.IOException;
import java.net.URI;
import java.util.ArrayList;
import java.util.List;

import org.neo4j.graphdb.Direction;
import org.neo4j.graphdb.GraphDatabaseService;
import org.neo4j.graphdb.Node;
import org.neo4j.graphdb.Relationship;
import org.neo4j.graphdb.RelationshipType;
import org.neo4j.graphdb.Transaction;
import org.neo4j.graphdb.factory.GraphDatabaseFactory;
import org.neo4j.graphdb.index.Index;
import org.neo4j.graphdb.index.IndexHits;
import org.neo4j.graphdb.index.IndexManager;
import org.neo4j.graphdb.index.RelationshipIndex;
import org.neo4j.kernel.impl.util.FileUtils;

import com.brandtology.alert.twitter.datasift.DatasiftParser;
import com.brandtology.entity.Tweet;
import com.brandtology.entity.Voice;
import com.brandtology.io.log.SystemLogger;
import com.brandtology.twitter.TwitterStatusLookup;
import com.brandtology.twitter.TwitterUserLookup;
import com.brandtology.util.FileHandler;
import com.brandtology.util.FormatConstant;

/**
 * @author leah
 *
 */
public class Neo4jEmbeddedGraphHandler {
	private static final String DB_PATH = "graph/test";
    
    // START SNIPPET: vars
    GraphDatabaseService graphDb;
    IndexManager index;
    Index<Node> voices;
    Index<Node> tweets;
    RelationshipIndex publish;
    // END SNIPPET: vars
    
	private static void registerShutdownHook( final GraphDatabaseService graphDb )
	{
		// Registers a shutdown hook for the Neo4j instance so that it
		// shuts down nicely when the VM exits (even if you "Ctrl-C" the
		// running example before it's completed)
		Runtime.getRuntime().addShutdownHook( new Thread()
		{
			@Override
			public void run()
			{
				graphDb.shutdown();
			}
		} );
	}

	private static enum RelTypes implements RelationshipType
	{
		FOLLOWS, PUBLISHED_BY, MENTION, REPLY, RETWEET
	}

    void createDb()
    {
        clearDb();
        // START SNIPPET: startDb
        graphDb = new GraphDatabaseFactory().newEmbeddedDatabase( DB_PATH );
        registerShutdownHook( graphDb );
        // END SNIPPET: startDb
        
        index = graphDb.index();
        voices = index.forNodes( "voices" );
        tweets = index.forNodes( "tweets" );
        publish = index.forRelationships( "publish" );
    }
    
    Node createVoiceNode(Voice voice){
    	Node node = null;
        // START SNIPPET: transaction
        Transaction tx = graphDb.beginTx();
        try
        {
            // Mutating operations go here
            // END SNIPPET: transaction
            // START SNIPPET: addData
            node = graphDb.createNode();
            node.setProperty("uid", voice.getUid());
            node.setProperty("screen_name", voice.getScreenName());
            // END SNIPPET: addData

            voices.add( node, "uid", node.getProperty("uid") );
            voices.add( node, "screen_name", node.getProperty("screen_name") );
            
            // START SNIPPET: transaction
            tx.success();
        }
        finally
        {
            tx.finish();
        }
        // END SNIPPET: transaction
        return node;
    }

    Node createTweetNode(Tweet tweet){
    	if(tweet==null)
    		return null;
    	
    	Node node = null;
        // START SNIPPET: transaction
        Transaction tx = graphDb.beginTx();
        try
        {
            // Mutating operations go here
            // END SNIPPET: transaction
            // START SNIPPET: addData
            node = graphDb.createNode();
            node.setProperty("mid", tweet.getMid());
            node.setProperty("published_at", tweet.getTimestamp());
            // END SNIPPET: addData

            tweets.add( node, "mid", node.getProperty("mid") );
            tweets.add( node, "published_at", node.getProperty("published_at") );
            
            // START SNIPPET: transaction
            tx.success();
        }
        finally
        {
            tx.finish();
        }
        // END SNIPPET: transaction
        return node;
    }

    /**
     * 
     */
    Relationship createRelationship(Node startNode, Node endNode, RelTypes relType){
    	Relationship relationship = null;
    	// START SNIPPET: transaction
        Transaction tx = graphDb.beginTx();
        try
        {
            // START SNIPPET: addData
            relationship = startNode.createRelationshipTo(endNode, relType);
            //relationship.setProperty("timestamp", "brave Neo4j " );
            // END SNIPPET: addData

            // START SNIPPET: transaction
            tx.success();
        }
        finally
        {
            tx.finish();
        }
        return relationship;
    }
    
    /**
     * 
     */
    void addRelationshipProperty(Relationship relationship, String key, String value){
    	// START SNIPPET: transaction
        Transaction tx = graphDb.beginTx();
        try
        {
            // START SNIPPET: addData
            relationship.setProperty(key, value);
            // END SNIPPET: addData

            // START SNIPPET: transaction
            tx.success();
        }
        finally
        {
            tx.finish();
        }
    }
    
    /**
     * 
     */
    Node getVoiceNodeByUid(String uid){
    	Node node = null;
    	
    	IndexHits<Node> hits = voices.get( "uid", uid );
    	node = hits.getSingle();
    	
    	return node;
    }

    /**
     * 
     */
    Node getVoiceNodeByScreenName(String screenName){
    	Node node = null;
    	
    	IndexHits<Node> hits = voices.get( "screen_name", screenName );
    	node = hits.getSingle();
    	
    	return node;
    }
    
    
    /**
     * 
     */
    List queryVoiceNodesByScreenName(String screenName){
    	List results = new ArrayList();
    	
    	for ( Node node : voices.query( "screen_name", screenName ) )
    	{
    	    results.add(node);
    	}
    	
    	return results;
    }

    /**
     * 
     */
    Node getTweetNodeByMid(String mid){
    	Node node = null;
    	
    	IndexHits<Node> hits = voices.get( "mid", mid );
    	node = hits.getSingle();
    	
    	return node;
    }
    
    /**
     * 
     */
    List queryTweetNodeByPublishTime(long timestamp){
    	List results = new ArrayList();
    	
    	for ( Node node : tweets.query( "published_at", timestamp ) )
    	{
    	    results.add(node);
    	}
    	
    	return results;
    }
    
    /**
     * 
     */
    void removeVoiceNode(Node node)
    {
        Transaction tx = graphDb.beginTx();
        try
        {
        	voices.remove(node);
        	voices.remove(node, "uid", node.getProperty("uid"));
        	voices.remove(node, "screen_name", node.getProperty("screen_name"));
        	
            // START SNIPPET: removingData
            // let's remove the data
            node.getSingleRelationship( RelTypes.FOLLOWS, Direction.OUTGOING ).delete();
            node.getSingleRelationship( RelTypes.FOLLOWS, Direction.INCOMING ).delete();
            node.getSingleRelationship( RelTypes.MENTION, Direction.INCOMING ).delete();
            node.getSingleRelationship( RelTypes.PUBLISHED_BY, Direction.INCOMING ).delete();
            node.delete();
            // END SNIPPET: removingData

            tx.success();
        }
        finally
        {
            tx.finish();
        }
    }

    /**
     * 
     */
    void removeTweetNode(Node node)
    {
        Transaction tx = graphDb.beginTx();
        try
        {
        	tweets.remove(node);
        	tweets.remove(node, "mid", node.getProperty("mid"));
        	tweets.remove(node, "published_at", node.getProperty("published_at"));
        	
            // START SNIPPET: removingData
            // let's remove the data
        	node.getSingleRelationship( RelTypes.PUBLISHED_BY, Direction.OUTGOING ).delete();
            node.getSingleRelationship( RelTypes.MENTION, Direction.OUTGOING ).delete();
            node.getSingleRelationship( RelTypes.REPLY, Direction.INCOMING ).delete();
            node.getSingleRelationship( RelTypes.REPLY, Direction.OUTGOING ).delete();
            node.getSingleRelationship( RelTypes.RETWEET, Direction.INCOMING ).delete();
            node.getSingleRelationship( RelTypes.RETWEET, Direction.OUTGOING ).delete();
            node.delete();
            // END SNIPPET: removingData

            tx.success();
        }
        finally
        {
            tx.finish();
        }
    }

    /**
     * 
     */
    private void clearDb()
    {
        try
        {
            FileUtils.deleteRecursively( new File( DB_PATH ) );
        }
        catch ( IOException e )
        {
            throw new RuntimeException( e );
        }
    }

    /**
     * 
     */
    void shutDown()
    {
        SystemLogger.printInfo( "SHUTTING DOWN Neo4j DATABASE ..." );
        // START SNIPPET: shutdownServer
        graphDb.shutdown();
        // END SNIPPET: shutdownServer
    }
    
	/**
	 * @param args
	 */
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Neo4jEmbeddedGraphHandler neo4j = new Neo4jEmbeddedGraphHandler();
		neo4j.createDb();
		
		String fileName = new String(System.getProperty("user.dir")+"/data/sample_datasift_file_SG_20120610_001501_done.json");
		String value = FileHandler.getFileContent(fileName);
		
		List results = DatasiftParser.parseJSON(value);
		for(int i=0;i<results.size();i++){
			Tweet tweet = (Tweet)results.get(i);
			Voice user = tweet.getAuthor();
//			System.out.println(user.writeToLogger());
//			System.out.println(tweet.writeToLogger());

	        // START SNIPPET: nodesAndProps
			Node voiceNode = neo4j.getVoiceNodeByUid(user.getUid());
			if(voiceNode==null){
				voiceNode = neo4j.createVoiceNode(user);	
				System.out.println("CREATING NEW VOICE NODE:\t"+voiceNode.getProperty("screen_name"));
			}
			Node tweetNode = neo4j.getTweetNodeByMid(tweet.getMid());
			if(tweetNode==null){
				tweetNode = neo4j.createTweetNode(tweet);
				System.out.println("CREATING NEW TWEET NODE:\t"+tweetNode.getProperty("mid"));
			}
	        // END SNIPPET: nodesAndProps

	        // START SNIPPET: addRel
			Relationship published = neo4j.createRelationship(tweetNode, voiceNode, RelTypes.PUBLISHED_BY);
	        System.out.println("RELATIONSHIP CREATED:\t("+tweetNode.getProperty("mid")+" -- "+RelTypes.PUBLISHED_BY.name()+" -- "+voiceNode.getProperty("screen_name")+")");
			// END SNIPPET: addRel

	        List mentions = tweet.getMentions();
	        for(int m=0;m<mentions.size();m++){
	        	String screenName = (String)mentions.get(m);
	        	Node mentioned = neo4j.getVoiceNodeByScreenName(screenName);
	        	if(mentioned==null){
	        		Voice voice = TwitterUserLookup.getTwitterUser(screenName);
	        		mentioned = neo4j.createVoiceNode(voice);	
					System.out.println("CREATING NEW VOICE NODE:\t"+mentioned.getProperty("screen_name")+"\tMENTIONS");        		
	        	}

        		Relationship mention = neo4j.createRelationship(tweetNode, mentioned, RelTypes.MENTION);
    	        System.out.println("RELATIONSHIP CREATED:\t("+tweetNode.getProperty("mid")+" -- "+RelTypes.MENTION.name()+" -- "+mentioned.getProperty("screen_name")+")");
    			
	        }
	        
	        String pmid = tweet.getParentMid();
	        if(pmid!=null && !pmid.equals("null")){
	        	Node parent = neo4j.getTweetNodeByMid(pmid);
	        	if(parent==null){
	        		Tweet retweeted = TwitterStatusLookup.getStatusDetail(pmid);
	        		if(retweeted==null)
	        			continue;
	        		
	        		parent = neo4j.createTweetNode(retweeted);
	        		System.out.println("CREATING NEW TWEET NODE:\t"+parent.getProperty("mid")+"\tPARENT");
	    			
	        		Voice voice = retweeted.getAuthor();
	        		if(voice==null)
	        			continue;
	        		
	        		Node vNode = null;
	        		if(voice.getUid()!=null)
	        			vNode = neo4j.getVoiceNodeByUid(voice.getUid());
	        		else
	        			vNode = neo4j.getVoiceNodeByScreenName(voice.getScreenName());
	        		
	        		if(vNode==null){
	        			vNode = neo4j.createVoiceNode(voice);
	        			System.out.println("CREATING NEW VOICE NODE:\t"+vNode.getProperty("screen_name")+"\tPARENT VOICE");
		    			
	        			Relationship published2 = neo4j.createRelationship(parent, vNode, RelTypes.PUBLISHED_BY);
	        			System.out.println("RELATIONSHIP CREATED:\t("+parent.getProperty("mid")+" -- "+RelTypes.PUBLISHED_BY.name()+" -- "+vNode.getProperty("screen_name")+")");
	        		
	        		}
	        	}
	        	
	        	int relatinshipTypeID = tweet.getRelationshipTypeID();
	        	if(relatinshipTypeID==2){
	        		Relationship reply = neo4j.createRelationship(tweetNode, parent, RelTypes.REPLY);
	        		System.out.println("RELATIONSHIP CREATED:\t("+tweetNode.getProperty("mid")+" -- "+RelTypes.REPLY.name()+" -- "+parent.getProperty("mid")+")");
	    		}else if(relatinshipTypeID==3){
	        		Relationship retweet = neo4j.createRelationship(tweetNode, parent, RelTypes.RETWEET);
	        		System.out.println("RELATIONSHIP CREATED:\t("+tweetNode.getProperty("mid")+" -- "+RelTypes.RETWEET.name()+" -- "+parent.getProperty("mid")+")");
	    		}
	        }
		}	
		
//		neo4j.clearDb();
		neo4j.shutDown();
	}
	
}
