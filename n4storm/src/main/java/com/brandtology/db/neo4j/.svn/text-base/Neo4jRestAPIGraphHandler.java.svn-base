/**
 * 
 */
package com.brandtology.db.neo4j;

import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import org.neo4j.graphdb.Direction;
import org.neo4j.graphdb.GraphDatabaseService;
import org.neo4j.graphdb.Node;
import org.neo4j.graphdb.Path;
import org.neo4j.graphdb.Relationship;
import org.neo4j.graphdb.Transaction;
import org.neo4j.graphdb.index.Index;
import org.neo4j.graphdb.index.IndexHits;
import org.neo4j.graphdb.index.IndexManager;
import org.neo4j.graphdb.index.RelationshipIndex;
import org.neo4j.graphdb.traversal.Evaluation;
import org.neo4j.graphdb.traversal.Evaluator;
import org.neo4j.graphdb.traversal.TraversalDescription;
import org.neo4j.kernel.Traversal;
import org.neo4j.rest.graphdb.RestAPI;
import org.neo4j.rest.graphdb.RestGraphDatabase;

import com.brandtology.alert.twitter.datasift.DatasiftParser;
import com.brandtology.entity.Tweet;
import com.brandtology.entity.Voice;
import com.brandtology.io.log.SystemLogger;
import com.brandtology.twitter.TwitterStatusLookup;
import com.brandtology.twitter.TwitterUserLookup;
import com.brandtology.util.FileHandler;

/**
 * @author leah
 *
 */
public class Neo4jRestAPIGraphHandler {
	private static final String SERVER_ROOT_URI = "http://localhost:7474/db/data/";//"http://192.168.50.212:7474/";
    
    // START SNIPPET: vars
    GraphDatabaseService graphDb;
    RestAPI restAPI;
    IndexManager index;
    Index<Node> voices;
    Index<Node> tweets;
    RelationshipIndex publish;
    // END SNIPPET: vars
    
	private static void registerShutdownHook( final GraphDatabaseService graphDb )
	{
		// Registers a shutdown hook for the Neo4j instance so that it
		// shuts down nicely when the VM exits (even if you "Ctrl-C" the
		// running example before it's completed)
		Runtime.getRuntime().addShutdownHook( new Thread()
		{
			@Override
			public void run()
			{
				graphDb.shutdown();
			}
		} );
	}

    void createDb()
    {
        // START SNIPPET: startDb
        graphDb = new RestGraphDatabase(SERVER_ROOT_URI);
        registerShutdownHook( graphDb );
        // END SNIPPET: startDb

        //restAPI = new RestAPIFacade(SERVER_ROOT_URI);
        
        index = graphDb.index();
        voices = index.forNodes( "voices" );
        tweets = index.forNodes( "tweets" );
        publish = index.forRelationships( "publish" );
    }
    
    Node createVoiceNode(Voice voice){
    	Node node = null;
        // START SNIPPET: transaction
        Transaction tx = graphDb.beginTx();
        try
        {
            // Mutating operations go here
            // END SNIPPET: transaction
            // START SNIPPET: addData
            node = graphDb.createNode();
            node.setProperty("uid", voice.getUid());
            node.setProperty("screen_name", voice.getScreenName());
            // END SNIPPET: addData

//            voices.add( node, "uid", node.getProperty("uid") );
//            voices.add( node, "screen_name", node.getProperty("screen_name") );
            
            // START SNIPPET: transaction
            tx.success();
        }
        finally
        {
            tx.finish();
        }
        // END SNIPPET: transaction
        return node;
    }

    void indexVoiceNode(Node node){
    	 Transaction tx = graphDb.beginTx();
         try
         {
             // END SNIPPET: transaction
             // START SNIPPET: addData
             voices.add( node, "uid", node.getProperty("uid") );
             voices.add( node, "screen_name", node.getProperty("screen_name") );
             
             // START SNIPPET: transaction
             tx.success();
         }
         finally
         {
             tx.finish();
         }
    }
    
    Node createTweetNode(Tweet tweet){
    	if(tweet==null)
    		return null;
    	
    	Node node = null;
        // START SNIPPET: transaction
        Transaction tx = graphDb.beginTx();
        try
        {
            // Mutating operations go here
            // END SNIPPET: transaction
            // START SNIPPET: addData
            node = graphDb.createNode();
            node.setProperty("mid", tweet.getMid());
            //node.setProperty("content", tweet.getTimestamp());
            // END SNIPPET: addData

//            tweets.add( node, "mid", node.getProperty("mid") );
//            tweets.add( node, "content", node.getProperty("content") );
            
            // START SNIPPET: transaction
            tx.success();
        }
        finally
        {
            tx.finish();
        }
        // END SNIPPET: transaction
        return node;
    }

    /**
     * 
     */
    void indexTweetNode(Node node){
        // START SNIPPET: transaction
        Transaction tx = graphDb.beginTx();
        try
        {
            // END SNIPPET: transaction
            // START SNIPPET: addData
            tweets.add( node, "mid", node.getProperty("mid") );
            //tweets.add( node, "content", node.getProperty("content") );            
            // START SNIPPET: transaction
            tx.success();
        }
        finally
        {
            tx.finish();
        }
        // END SNIPPET: transaction
    }

    /**
     * 
     */
    Relationship createRelationship(Node startNode, Node endNode, MicroblogRelationshipType relType){
    	Relationship relationship = null;
    	// START SNIPPET: transaction
        Transaction tx = graphDb.beginTx();
        try
        {
            // START SNIPPET: addData
            relationship = startNode.createRelationshipTo(endNode, relType);
            //relationship.setProperty("timestamp", "brave Neo4j " );
            // END SNIPPET: addData

            // START SNIPPET: transaction
            tx.success();
        }
        finally
        {
            tx.finish();
        }
        return relationship;
    }

    /**
     * 
     */
    Relationship removeRelationship(Node startNode, MicroblogRelationshipType relType){
    	Relationship relationship = null;
    	// START SNIPPET: transaction
        Transaction tx = graphDb.beginTx();
        try
        {
            // START SNIPPET: addData
            startNode.getSingleRelationship( relType, Direction.OUTGOING ).delete();
            //relationship.setProperty("timestamp", "brave Neo4j " );
            // END SNIPPET: addData

            // START SNIPPET: transaction
            tx.success();
        }
        finally
        {
            tx.finish();
        }
        return relationship;
    }
    
    /**
     * 
     */
    void addRelationshipProperty(Relationship relationship, String key, String value){
    	// START SNIPPET: transaction
        Transaction tx = graphDb.beginTx();
        try
        {
            // START SNIPPET: addData
            relationship.setProperty(key, value);
            // END SNIPPET: addData

            // START SNIPPET: transaction
            tx.success();
        }
        finally
        {
            tx.finish();
        }
    }
    
    /**
     * 
     */
    Node getVoiceNodeByUid(String uid){
    	Node node = null;
    	
    	IndexHits<Node> hits = voices.get( "uid", uid );
    	node = hits.getSingle();
    	
    	return node;
    }

    /**
     * 
     */
    Node getVoiceNodeByScreenName(String screenName){
    	Node node = null;
    	
    	IndexHits<Node> hits = voices.get( "screen_name", screenName );
    	node = hits.getSingle();
    	
    	return node;
    }
    
    
    /**
     * 
     */
    List queryVoiceNodesByScreenName(String screenName){
    	List results = new ArrayList();
    	
    	for ( Node node : voices.query( "screen_name", screenName ) )
    	{
    	    results.add(node);
    	}
    	
    	return results;
    }

    /**
     * 
     */
    Node getTweetNodeByMid(String mid){
    	Node node = null;
    	
    	IndexHits<Node> hits = voices.get( "mid", mid );
    	node = hits.getSingle();
    	
    	return node;
    }
    
    /**
     * 
     */
    List queryTweetNodeByPublishTime(long timestamp){
    	List results = new ArrayList();
    	
    	for ( Node node : tweets.query( "content", timestamp ) )
    	{
    	    results.add(node);
    	}
    	
    	return results;
    }
    
    /**
     * 
     */
    void removeVoiceNodeIndex(Node node)
    {
        Transaction tx = graphDb.beginTx();
        try
        {
        	voices.remove(node);
        	voices.remove(node, "uid", node.getProperty("uid"));
        	voices.remove(node, "screen_name", node.getProperty("screen_name"));
            // END SNIPPET: removingData

            tx.success();
        }
        finally
        {
            tx.finish();
        }
    }
    
    /**
     * 
     */
    void removeVoiceNode(Node node)
    {
        Transaction tx = graphDb.beginTx();
        try
        {
        	// START SNIPPET: removingData
            // let's remove the data
            node.getSingleRelationship( MicroblogRelationshipType.FOLLOWS, Direction.OUTGOING ).delete();
            node.getSingleRelationship( MicroblogRelationshipType.FOLLOWS, Direction.INCOMING ).delete();
            node.getSingleRelationship( MicroblogRelationshipType.MENTION, Direction.INCOMING ).delete();
            node.getSingleRelationship( MicroblogRelationshipType.PUBLISH, Direction.OUTGOING ).delete();
            node.delete();
            // END SNIPPET: removingData

            tx.success();
        }
        finally
        {
            tx.finish();
        }
    }

    /**
     * 
     */
    void removeTweetNodeIndex(Node node)
    {
        Transaction tx = graphDb.beginTx();
        try
        {
        	tweets.remove(node);
        	tweets.remove(node, "mid", node.getProperty("mid"));
        	tweets.remove(node, "content", node.getProperty("content"));
             // END SNIPPET: removingData

            tx.success();
        }
        finally
        {
            tx.finish();
        }
    }

    /**
     * 
     */
    void removeTweetNode(Node node)
    {
        Transaction tx = graphDb.beginTx();
        try
        {
            // START SNIPPET: removingData
            // let's remove the data
        	node.getSingleRelationship( MicroblogRelationshipType.PUBLISH, Direction.INCOMING ).delete();
            node.getSingleRelationship( MicroblogRelationshipType.MENTION, Direction.OUTGOING ).delete();
            node.getSingleRelationship( MicroblogRelationshipType.REPLY, Direction.INCOMING ).delete();
            node.getSingleRelationship( MicroblogRelationshipType.REPLY, Direction.OUTGOING ).delete();
            node.getSingleRelationship( MicroblogRelationshipType.RETWEET, Direction.INCOMING ).delete();
            node.getSingleRelationship( MicroblogRelationshipType.RETWEET, Direction.OUTGOING ).delete();
            node.delete();
            // END SNIPPET: removingData

            tx.success();
        }
        finally
        {
            tx.finish();
        }
    }

    public static void findRetweetVoices( Node voiceNode )
            throws URISyntaxException
    {
    	
        // START SNIPPET: traversalDesc
        // TraversalDescription turns into JSON to send to the Server
        TraversalDescription t = Traversal.description()
        		.breadthFirst()
        		.relationships(MicroblogRelationshipType.PUBLISH)
        		.relationships(MicroblogRelationshipType.RETWEET)
        		.evaluator(new Evaluator()
        		{
                    @Override
                    public Evaluation evaluate( Path path )
                    {
                        if (path.length() == 5) {
                            return Evaluation.INCLUDE_AND_PRUNE;
                        }
                        return Evaluation.EXCLUDE_AND_CONTINUE;
                    }
                }); 
        
                
        // END SNIPPET: traversalDesc

        // START SNIPPET: traverse
        for(Path path : t.traverse(voiceNode)){
        	SystemLogger.printInfo(path.toString()+"\n");
        }
        // END SNIPPET: traverse
    }

    public static void findAllTweets( Node voiceNode )
            throws URISyntaxException
    {
    	
        // START SNIPPET: traversalDesc
        // TraversalDescription turns into JSON to send to the Server
        TraversalDescription t = Traversal.description()
        		.breadthFirst()
        		.relationships(MicroblogRelationshipType.PUBLISH);
        		
        		/*.evaluator(new Evaluator()
        		{
                    @Override
                    public Evaluation evaluate( Path path )
                    {
                        if (path.length() == 2) {
                            return Evaluation.INCLUDE_AND_PRUNE;
                        }
                        return Evaluation.EXCLUDE_AND_CONTINUE;
                    }
                });*/ 
        
                
        // END SNIPPET: traversalDesc

        // START SNIPPET: traverse
        for(Path path : t.traverse(voiceNode)){
        	SystemLogger.printInfo(path.toString()+"\n");
        }
        // END SNIPPET: traverse
    }
    
    /**
     * 
     */
    void shutDown()
    {
        SystemLogger.printInfo( "SHUTTING DOWN Neo4j DATABASE ..." );
        // START SNIPPET: shutdownServer
        graphDb.shutdown();
        // END SNIPPET: shutdownServer
    }
        
	/**
	 * @param args
	 */
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Neo4jRestAPIGraphHandler neo4j = new Neo4jRestAPIGraphHandler();
		neo4j.createDb();
		
		String fileName = new String(System.getProperty("user.dir")+"/data/sample_datasift_file_SG_20120610_001501_done.json");
		String value = FileHandler.getFileContent(fileName);
		
		List results = DatasiftParser.parseJSON(value);
		for(int i=0;i<results.size();i++){
			Tweet tweet = (Tweet)results.get(i);
			
		}	
		
		neo4j.shutDown();
	}
	
}
